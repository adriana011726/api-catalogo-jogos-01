usando a  Microsoft . AspNetCore . Mvc ;
using  System ;
usando o  sistema . Texto ;
usando o  sistema . Threading . Tarefas ;

namespace  ExemploApiCatalogoJogos . Controladores . V1
{
    [ Route ( " api / v1 / [controlador] " )]
    [ ApiController ]
     classe  pública CicloDeVidaIDController : ControllerBase
    {
        public  readonly  IExemploSingleton  _exemploSingleton1 ;
        public  readonly  IExemploSingleton  _exemploSingleton2 ;

        public  somente leitura  IExemploScoped  _exemploScoped1 ;
        public  readonly  IExemploScoped  _exemploScoped2 ;

        public  readonly  IExemploTransient  _exemploTransient1 ;
        public  somente leitura  IExemploTransient  _exemploTransient2 ;

        public  CicloDeVidaIDController ( IExemploSingleton  exemploSingleton1 ,
                                       IExemploSingleton  exemploSingleton2 ,
                                       IExemploScoped  exemploScoped1 ,
                                       IExemploScoped  exemploScoped2 ,
                                       IExemploTransient  exemploTransient1 ,
                                       IExemploTransient  exemploTransient2 )
        {
            _exemploSingleton1  =  exemploSingleton1 ;
            _exemploSingleton2  =  exemploSingleton2 ;
            _exemploScoped1  =  exemploScoped1 ;
            _exemploScoped2  =  exemploScoped2 ;
            _exemploTransient1  =  exemploTransient1 ;
            _exemploTransient2  =  exemploTransient2 ;
        }

        [ HttpGet ]
        public  Task < string > Get ()
        {
            StringBuilder  stringBuilder  =  new  StringBuilder ();

            stringBuilder . AppendLine ( $ " Singleton 1: { _exemploSingleton1 . Id } " );
            stringBuilder . AppendLine ( $ " Singleton 2: { _exemploSingleton2 . Id } " );
            stringBuilder . AppendLine ();
            stringBuilder . AppendLine ( $ " Escopo 1: { _exemploScoped1 . Id } " );
            stringBuilder . AppendLine ( $ " Escopo 2: { _exemploScoped2 . Id } " );
            stringBuilder . AppendLine ();
            stringBuilder . AppendLine ( $ " Transiente 1: { _exemploTransient1 . Id } " );
            stringBuilder . AppendLine ( $ " Transiente 2: { _exemploTransient2 . Id } " );

            return  Task . FromResult ( stringBuilder . ToString ());
        }

    }

     interface  pública IExemploGeral
    {
id do Guid          público { get ; }
    }

     interface  pública IExemploSingleton : IExemploGeral
    {}

     interface  pública IExemploScoped : IExemploGeral
    {}

     interface  pública IExemploTransient : IExemploGeral
    {}

     classe  pública ExemploCicloDeVida : IExemploSingleton , IExemploScoped , IExemploTransient
    {
        privado  somente leitura  Guid  _guid ;

        public  ExemploCicloDeVida ()
        {
            _guid  =  Guid . NewGuid ();
        }

         Id do Guid  público => _guid ;  
    }

}